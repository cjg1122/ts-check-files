#!/usr/bin/env node
import{spawnSync as A}from"node:child_process";import c from"node:fs";import{join as p}from"node:path";function h(n){let{files:t,cwd:s=process.cwd(),include:r=[],exclude:u=[]}=n,m=p(s,"tsconfig.json"),y=c.readFileSync(m,"utf8"),x={...JSON.parse(y),include:r,exclude:u,files:t},o=p(s,".tsconfig.tmp.json");c.writeFileSync(o,JSON.stringify(x,null,2),"utf8"),A("npx",["tsc","-p",o],{stdio:"inherit"}),c.unlinkSync(o)}var a=h;function e(n){return typeof n=="string"?[n]:Array.isArray(n)?n:[]}function g(n){let t={_:[]},s=null;for(let r of n)r.startsWith("--")?(s=r.slice(2),t[s]=!0):r.startsWith("-")?(s=r.slice(1),t[s]=!0):s?t[s]===!0?t[s]=r:Array.isArray(t[s])?t[s].push(r):t[s]=[t[s],r]:t._.push(r);return t}var i=g(process.argv.slice(2)),d=[...i._,...e(i.files)],w=e(i.include),C=e(i.exclude),T=typeof i.cwd=="string"?i.cwd:process.cwd();d.length===0&&(console.log("tscf: No files to check"),process.exit(0));a({files:d,cwd:T,include:w,exclude:C});
